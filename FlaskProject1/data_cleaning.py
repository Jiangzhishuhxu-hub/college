import pandas as pd
import chardet

# 定义学校和对应省份的映射关系
school_province_mapping = {
    "天津大学": "天津", "广东科技大学": "广东", "西安邮电大学": "陕西", "重庆理工大学": "重庆", "宁波大学": "浙江",
    "中国地质大学（北京）": "北京", "北方工业大学": "北京",
    "北京信息科技大学": "北京", "扬州大学": "江苏", "北京工商大学": "北京", "西北师范大学": "陕西", "云南大学": "云南",
    "西南科技大学": "四川", "重庆交通大学": "重庆", "电子科技大学": "四川",
    "西南交通大学": "四川", "重庆大学": "重庆", "桂林理工大学": "广西", "华南师范大学": "广东", "长沙理工大学": "湖南",
    "湖南科技大学": "湖南", "湘潭大学": "湖南", "中南民族大学": "湖南", "中南财经政法大学": "湖南",
    "湖北民族大学": "湖北", "华中师范大学": "湖北", "湖北工业大学": "湖北",
    "武汉理工大学": "湖北", "武汉纺织大学": "湖北", "长江大学": "湖北", "武汉科技大学": "湖北", "华中科技大学": "湖北",
    "武汉大学": "湖北", "河南农业大学": "河南",
    "太原理工大学": "山西",
    "河南理工大学": "河南",
    "北京交通大学": "北京",
    "山东财经大学": "山东",
    "山东师范大学": "山东",
    "山东理工大学": "山东",
    "青岛科技大学": "山东",
    "江西财经大学": "江西",
    "南昌航空大学": "江西",
    "东华理工大学": "江西",
    "福建农林大学": "福建",
    # 你可以根据实际情况添加更多的学校和省份映射
}

# 定义学校和对应院校层次的映射关系
school_level_mapping = {
    "天津大学": "985高校", "广东科技大学": "985高校", "西安邮电大学": "985高校", "重庆理工大学": "985高校", "宁波大学": "985高校",
    "中国地质大学（北京）": "211高校", "北方工业大学": "211高校",
    "北京信息科技大学": "211高校", "扬州大学": "211高校", "北京工商大学": "北京", "西北师范大学": "211高校", "云南大学": "211高校",
    "西南科技大学": "211高校", "重庆交通大学": "985高校", "电子科技大学": "985高校",
    "西南交通大学": "211高校", "重庆大学": "985高校", "桂林理工大学": "211高校", "华南师范大学": "211高校", "长沙理工大学": "985高校",
    "湖南科技大学": "211高校", "湘潭大学": "211高校", "中南民族大学": "985高校", "中南财经政法大学": "211高校",
    "湖北民族大学": "211高校", "华中师范大学": "985高校", "湖北工业大学": "211高校",
    "武汉理工大学": "985高校", "武汉纺织大学": "211高校", "长江大学": "211高校", "武汉科技大学": "双一流高校", "华中科技大学": "双一流高校",
    "武汉大学": "985高校", "河南农业大学": "双一流高校",
    "太原理工大学": "985高校",
    "河南理工大学": "双一流高校",
    "北京交通大学": "985院校",
    "山东财经大学": "双一流高校",
    "山东师范大学": "双一流高校",
    "山东理工大学": "双一流高校",
    "青岛科技大学": "省属高校",
    "江西财经大学": "省属高校",
    "南昌航空大学": "省属高校",
    "东华理工大学": "省属高校",
    "福建农林大学": "省属高校",
    # 你可以根据实际情况添加更多的学校和院校层次映射
}

# 检测文件编码
with open('../score.csv', 'rb') as f:
    result = chardet.detect(f.read())
    encoding = result['encoding']

# 使用正确的编码格式加载数据
df = pd.read_csv('../score.csv', encoding=encoding)

# 处理学院列错误表述
df['学院'] = df['学院'].str.replace('College', '学院')

# 删除总分列为'-'的行
df = df[df['总分'] != '-']

# 删除总分、数学、政治等列中值缺失的行
columns_to_check = ['总分', '数学', '政治']
df = df.dropna(subset=columns_to_check)

# 将分数相关列转换为数值类型
score_columns = ['总分', '政治', '英语', '数学', '408专业基础']
for col in score_columns:
    df[col] = pd.to_numeric(df[col], errors='coerce')

# 删除分数列转换后产生的缺失值行
df = df.dropna(subset=score_columns)

# 添加省份列并根据学校填充
df['省份'] = df['学校'].map(school_province_mapping)

# 添加院校层次列并根据学校填充
df['院校层次'] = df['学校'].map(school_level_mapping)

# 将NaN值替换为默认值，如"未知"
df['省份'] = df['省份'].fillna("未知")
df['院校层次'] = df['院校层次'].fillna("未知")

# 将清洗后的数据保存为csv文件
csv_path = 'score_cleaned.csv'  # 保存到当前项目目录下
df.to_csv(csv_path, index=False)